type Query {
    getForms(projectId: String!, ids: [String]): [Form]
}

type Subscription {
    formsModified(projectId: String!): Form
    formsCreated(projectId: String!): Form
    formsDeleted(projectId: String!): [Form]
}

type Mutation {
    submitForm(
        projectId: String!
        environment: String
        tracker: Any!
        metadata: Any
    ): updateResponse!
    upsertForm(form: FormInput): Form
    deleteForms(
        projectId: String!
        ids: [String]
    ): [Form]
    importSubmissions(
        form_results: [Any]!
        projectId: String!
        environment: Environement = development
    ): batchMutationOutput
}

type Form {
    _id: String
    name: FormName
    slots: [SlotToFill]
    collect_in_botfront: Boolean
    utter_on_submit: Boolean # utter_submit_{slot_name}
    description: String
    projectId: String
    groupId: String
    isExpanded: Boolean
    pinned: Boolean
    graph_elements: Any
    updatedAt: Float
}

type SlotToFill {
    name: String!
    filling: [SlotFilling]
    validation: SlotValidation
    utter_on_new_valid_slot: Boolean
    # utter_valid_{slot_name}
    # utter_invalid_{slot_name}
    # utter_ask_{slot_name}
}

type SlotValidation {
    operator: ValidationOperator!
    comparatum: Any
}

interface SlotFilling {
    type: FillingSource!
    intent: [String]
    not_intent: [String]
}

type SlotFillingFromEntity implements SlotFilling {
    type: FillingSource!
    entity: [String]
    group: [String]
    role: [String]
    intent: [String]
    not_intent: [String]
}

type SlotFillingFromIntent implements SlotFilling {
    type: FillingSource!
    intent: [String]
    not_intent: [String]
    value: Any
}

type SlotFillingFromText implements SlotFilling {
    type: FillingSource!
    intent: [String]
    not_intent: [String]
}

scalar FormName # (/^[a-zA-Z0-9-_]+_form$/)

enum FillingSource {
    from_entity
    from_intent
    from_trigger_intent
    from_text
}

enum ValidationOperator {
    is_in
    is_exactly
    contains
    longer
    longer_or_equal
    shorter
    shorter_or_equal
    word
    starts_with
    ends_with
    matches
    eq
    gt
    gte
    lt
    lte
    email
}

input FormInput {
    _id: String
    name: FormName
    slots: [SlotToFillInput]
    description: String
    projectId: String!
    groupId: String
    utter_on_submit: Boolean # utter_submit_{slot_name}
    collect_in_botfront: Boolean
    isExpanded: Boolean
    pinned: Boolean = false
    graph_elements: Any
    updatedAt: Float
}

input SlotToFillInput {
    name: String
    filling: [SlotFillingInput]
    validation: SlotValidationInput
    utter_on_new_valid_slot: Boolean
}

input SlotFillingInput {
    type: FillingSource = from_text
    entity: [String]
    group: [String]
    role: [String]
    intent: [String]
    not_intent: [String]
    value: Any
}

input SlotValidationInput {
    operator: ValidationOperator!
    comparatum: Any
}